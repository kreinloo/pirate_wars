/*

	pw_server.js

*/

var util = require("util");
require("./pw_client");
require("../../../client/js/events");
require("./pw_gameserver");

/*
	PW_Server
*/
var PW_Server = function () {

	this.io = null;
	this.clients = {};
	this.gameServer = new GameServer (this);

	this.setIO = function (io) { this.io = io; };

	this.userConnectHandler = function (data, socket) {

		if (typeof data === undefined)
			return;

		data.socket = socket;
		client = new PW_Client(data);
		this.clients[client.getID()] = client;
		socket.set("clientID", client.getID());
		socket.broadcast.emit(SERVER.USER_CONNECTED, {
			name : client.getName(),
			id : client.getID()
		});
		this.userListHandler({}, socket);

	};

	this.userDisconnectHandler = function (socket) {

		var server = this;
		socket.get("clientID", function(err, id) {
			var client = server.clients[id];
			if (client === "undefined") { return; }
			delete server.clients[id];
			socket.broadcast.emit(SERVER.USER_DISCONNECTED, {
				name : client.getName(),
				id : client.getID()
			});
		});

	};

	this.publicMessageHandler = function (data, socket) {

		if (typeof data === "undefined")
			return;
		socket.broadcast.emit(CHAT.PUBLIC_MESSAGE, data);

	};

	this.userListHandler = function (data, socket) {

		var list = [];
		for (var c in this.clients) {
			client = this.clients[c];
			list.push({ name : client.getName(), id : client.getID() });
		}
		socket.emit(CHAT.USER_LIST, list);

	};

	this.createGameHandler = function (data, socket) {

		socket.broadcast.emit(GAME.CREATE, data);

	};

	this.deleteGameHandler = function (data, socket) {

		socket.broadcast.emit(GAME.DELETE, data);

	};

	this.joinGameHandler = function (data, socket) {

		var creator = this.clients[data.opponentID];
		var creatorSocket = creator.getSocket();
		// notify that creator of the game is not looking for opponent any more
		this.deleteGameHandler(
			{ name : data.opponentName,
				id : data.opponentID },
			creatorSocket);
		var joiner = this.clients[data.joinerID];
		var joinerSocket = joiner.getSocket();
		var gameID = this.gameServer.createGame(creator, joiner);

		creatorSocket.emit(GAME.START, {
			gid : gameID,
			opponentID : joiner.getID(),
			opponentName : joiner.getName()
		});

		joinerSocket.emit(GAME.START, {
			gid : gameID,
			opponentID : creator.getID(),
			opponentName : joiner.getName()
		});

	};

	this.bindListeners = function (server) {

		var server = this;
		this.io.sockets.on("connection", function(socket) {

			socket.on(CLIENT.AUTH, function (data) {
				util.log(CLIENT.AUTH + " " + JSON.stringify(data));
				server.userConnectHandler(data, socket);
			});

			socket.on(CHAT.PUBLIC_MESSAGE, function (data) {
				util.log(CHAT.PUBLIC_MESSAGE + " " + JSON.stringify(data));
				server.publicMessageHandler(data, socket);
			});

			socket.on(CHAT.USER_LIST, function (data) {
				util.log(CHAT.USER_LIST + " " + JSON.stringify(data));
				server.userListHandler(data, socket);
			});

			socket.on(GAME.CREATE, function (data) {
				util.log(GAME.CREATE + " " + JSON.stringify(data));
				server.createGameHandler(data, socket);
			});

			socket.on(GAME.DELETE, function (data) {
				util.log(GAME.DELETE + " " + JSON.stringify(data));
				server.deleteGameHandler(data, socket);
			});

			socket.on(GAME.JOIN_REQUEST, function (data) {
				util.log(GAME.JOIN_REQUEST + " " + JSON.stringify(data));
				server.joinGameHandler(data, socket);
			});

			socket.on(GAME.INFO, function (data) {
				util.log(GAME.INFO + " " + JSON.stringify(data));
				server.gameServer.handleGameInfo(data);
			});

			socket.on("disconnect", function () {
				util.log("DISCONNECT");
				server.userDisconnectHandler(socket);
			});

		});

	};

	this.emitGameInfo = function (pid, data) {
		var player = this.clients[pid];
		if (player === undefined) {
			return;
		}
		var playerSocket = player.getSocket();
		playerSocket.emit(GAME.INFO, data);
	};

};

module.exports = new PW_Server();
